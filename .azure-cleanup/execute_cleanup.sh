#!/bin/bash
# Azure Resource Cleanup Script
# Generated by Terraform Azure Cleanup Module

# Set confirmation mode
CONFIRM_MODE="--confirm"
if [ "$1" == "--auto" ]; then
  CONFIRM_MODE="--auto"
fi

# Log file
LOG_FILE="azure_cleanup_$(date +%Y%m%d_%H%M%S).log"

# Function to log messages
log() {
  echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# Function to confirm action
confirm() {
  if [ "$CONFIRM_MODE" == "--auto" ]; then
    return 0
  fi
  read -p "$1 (y/n): " response
  case "$response" in
    [yY][eE][sS]|[yY])
      return 0
      ;;
    *)
      return 1
      ;;
  esac
}

log "Starting Azure resource cleanup..."
log "Running in $([ "$CONFIRM_MODE" == "--auto" ] && echo "automatic" || echo "interactive") mode."

# Step 0: Create array of excluded resource groups (ones we want to keep)
EXCLUDED_RGS=(
  "NetworkWatcherRG"
  "cloud-shell-storage-westeurope"
  "cloud-shell-storage-*"
  "AzureBackupRG_*"
  "DefaultResourceGroup-*"
)

log "Excluded resource groups: ${EXCLUDED_RGS[*]}"

# Step 1: List all resource groups
log "Step 1: Discovering all resource groups..."
ALL_RESOURCE_GROUPS=($(az group list --query "[].name" -o tsv))
log "Found ${#ALL_RESOURCE_GROUPS[@]} resource groups in total."

# Step 2: Filter resource groups to clean up
log "Step 2: Filtering resource groups to delete..."
TARGET_RESOURCE_GROUPS=()

for RG in "${ALL_RESOURCE_GROUPS[@]}"; do
  SHOULD_EXCLUDE=false
  for PATTERN in "${EXCLUDED_RGS[@]}"; do
    if [[ "$RG" == $PATTERN ]]; then
      SHOULD_EXCLUDE=true
      log "Excluding resource group: $RG (matches pattern $PATTERN)"
      break
    fi
  done
  if [ "$SHOULD_EXCLUDE" = false ]; then
    TARGET_RESOURCE_GROUPS+=("$RG")
    log "Adding resource group for cleanup: $RG"
  fi
done

log "Found ${#TARGET_RESOURCE_GROUPS[@]} resource groups to clean up."

# Step 3: Remove all resource locks
log "Step 3: Removing resource locks..."
if confirm "Do you want to remove all resource locks?"; then
  for RG in "${TARGET_RESOURCE_GROUPS[@]}"; do
    log "Checking for locks in resource group: $RG"
    LOCKS=$(az lock list --resource-group "$RG" --query "[].id" -o tsv 2>/dev/null) || true
    if [ -n "$LOCKS" ]; then
      log "Found locks in $RG, removing..."
      for LOCK_ID in $LOCKS; do
        log "Removing lock: $LOCK_ID"
        az lock delete --ids "$LOCK_ID" || log "Failed to remove lock: $LOCK_ID"
      done
    fi
  done
  
  # Also check for subscription-level locks
  log "Checking for subscription-level locks..."
  SUB_LOCKS=$(az lock list --query "[?resourceGroup==null].id" -o tsv 2>/dev/null) || true
  if [ -n "$SUB_LOCKS" ]; then
    log "Found subscription-level locks, removing..."
    for LOCK_ID in $SUB_LOCKS; do
      log "Removing subscription lock: $LOCK_ID"
      az lock delete --ids "$LOCK_ID" || log "Failed to remove lock: $LOCK_ID"
    done
  fi
else
  log "Skipping lock removal."
fi

# Step 4: Special handling for Recovery Services vaults
log "Step 4: Special handling for Recovery Services vaults..."
if confirm "Do you want to clean up Recovery Services vaults?"; then
  for RG in "${TARGET_RESOURCE_GROUPS[@]}"; do
    log "Checking for Recovery Services vaults in resource group: $RG"
    VAULTS=$(az resource list --resource-group "$RG" --resource-type Microsoft.RecoveryServices/vaults --query "[].name" -o tsv 2>/dev/null) || true
    if [ -n "$VAULTS" ]; then
      for VAULT in $VAULTS; do
        log "Found Recovery Services vault: $VAULT in resource group: $RG"
        if confirm "Do you want to process vault: $VAULT in resource group: $RG?"; then
          # First, try to disable soft-delete on the vault
          log "Disabling soft delete for vault: $VAULT"
          az backup vault backup-properties set --resource-group "$RG" --name "$VAULT" --soft-delete-feature-state Disable 2>/dev/null || log "Failed to disable soft delete for vault: $VAULT"
          
          # Check for all protected items, including soft-deleted ones
          log "Checking for protected backup items in vault: $VAULT"
          CONTAINERS=$(az backup container list --resource-group "$RG" --vault-name "$VAULT" --backup-management-type AzureIaasVM --query "[].name" -o tsv 2>/dev/null) || true
          if [ -n "$CONTAINERS" ]; then
            for CONTAINER in $CONTAINERS; do
              log "Processing container: $CONTAINER"
              # List backup items, including soft-deleted ones
              ITEMS=$(az backup item list --resource-group "$RG" --vault-name "$VAULT" --backup-management-type AzureIaasVM --query "[].name" -o tsv 2>/dev/null) || true
              if [ -n "$ITEMS" ]; then
                for ITEM in $ITEMS; do
                  log "Attempting to undelete item: $ITEM"
                  # Try to undelete first (will fail if not needed, that's OK)
                  az backup item undelete --resource-group "$RG" --vault-name "$VAULT" --container-name "$CONTAINER" --item-name "$ITEM" --backup-management-type AzureIaasVM 2>/dev/null || log "Undelete not required or failed for: $ITEM"
                  # Sleep to allow operation to complete
                  sleep 20
                  log "Disabling protection for item: $ITEM"
                  az backup protection disable --resource-group "$RG" --vault-name "$VAULT" --container-name "$CONTAINER" --item-name "$ITEM" --backup-management-type AzureIaasVM --delete-backup-data true --yes 2>/dev/null || log "Failed to disable protection for item: $ITEM"
                  # Sleep to allow operation to complete
                  sleep 30
                done
              else
                log "No backup items found in container: $CONTAINER"
              fi
            done
          else
            log "No containers found in vault: $VAULT"
          fi
          # Try to delete the vault
          log "Attempting to delete vault: $VAULT after cleanup"
          az resource delete --resource-group "$RG" --resource-type Microsoft.RecoveryServices/vaults --name "$VAULT" 2>/dev/null || log "Failed to delete vault: $VAULT - manual intervention may be required"
        else
          log "Skipping vault: $VAULT"
        fi
      done
    else
      log "No Recovery Services vaults found in resource group: $RG"
    fi
  done
else
  log "Skipping Recovery Services vault cleanup."
fi

# Step 5: Find and deallocate all VMs to ensure clean deletion
log "Step 5: Finding and deallocating all VMs..."
if confirm "Do you want to stop and deallocate all VMs?"; then
  for RG in "${TARGET_RESOURCE_GROUPS[@]}"; do
    log "Checking for VMs in resource group: $RG"
    VMS=$(az vm list --resource-group "$RG" --query "[].name" -o tsv 2>/dev/null) || true
    if [ -n "$VMS" ]; then
      for VM in $VMS; do
        log "Stopping and deallocating VM: $VM in resource group: $RG"
        az vm deallocate --resource-group "$RG" --name "$VM" --no-wait || log "Failed to deallocate VM: $VM"
      done
    else
      log "No VMs found in resource group: $RG"
    fi
  done
  # Wait for deallocation to complete
  log "Waiting for VM deallocations to complete..."
  sleep 60
else
  log "Skipping VM deallocation."
fi

# Step 6: Delete all resource groups in the target list
log "Step 6: Deleting resource groups..."
if confirm "Do you want to delete the target resource groups?"; then
  for RG in "${TARGET_RESOURCE_GROUPS[@]}"; do
    # Verify the group still exists
    RG_EXISTS=$(az group exists --name "$RG" 2>/dev/null) || true
    if [ "$RG_EXISTS" = "true" ]; then
      if confirm "Do you want to delete resource group: $RG?"; then
        log "Deleting resource group: $RG"
        az group delete --name "$RG" --yes --no-wait || log "Failed to delete resource group: $RG"
      else
        log "Skipping resource group: $RG"
      fi
    else
      log "Resource group not found: $RG (may have been deleted already)"
    fi
  done
  # Wait for deletions to complete
  if confirm "Do you want to wait for deletions to complete?"; then
    log "Waiting for resource group deletions to complete..."
    MAX_RETRIES=30
    RETRY_COUNT=0
    while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
      PENDING_DELETES=$(az group list --query "[?provisioningState=='Deleting'].name" -o tsv 2>/dev/null | wc -l | tr -d ' ')
      if [ "$PENDING_DELETES" -eq "0" ]; then
        log "All resource group deletions completed!"
        break
      else
        log "$PENDING_DELETES resource groups still being deleted. Waiting 30 seconds..."
        sleep 30
        RETRY_COUNT=$((RETRY_COUNT + 1))
      fi
    done
  else
    log "Skipping wait for completion."
  fi
else
  log "Skipping resource group deletion."
fi

# Step 7: Verify remaining resource groups
log "Step 7: Verifying remaining resource groups..."
REMAINING_GROUPS=$(az group list --query "[].{Name:name, Status:properties.provisioningState}" -o table)
log "Remaining resource groups:"
echo "$REMAINING_GROUPS" | tee -a "$LOG_FILE"

# Step 8: Final verification of any leftover resources
log "Step 8: Final verification of resource cleanup..."
log "Checking for any remaining resources in non-excluded resource groups..."
RESOURCES=$(az resource list --query "[?!contains('${EXCLUDED_RGS[*]}', resourceGroup)]" -o table)
log "Remaining resources (excluding excluded resource groups):"
echo "$RESOURCES" | tee -a "$LOG_FILE"

log "Cleanup process completed. Check the log file for details: $LOG_FILE"

