# Terraform file containing local script variables for azure-cleanup module
# Separating scripts into a dedicated file helps manage complex heredoc content

locals {
  # Script for canceling Azure operations
  cancel_operations_script = <<-SCRIPT
#!/bin/bash
# Azure Operations Cancellation Script
# Generated by Terraform Azure Cleanup Module

# Create logs directory if it doesn't exist
mkdir -p ./logs

# Color codes for better readability
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Log file with timestamp
LOG_FILE="./logs/cancel_operations_$(date +%Y%m%d_%H%M%S).log"

# Function to log messages
log() {
  echo -e "$${BLUE}$(date '+%Y-%m-%d %H:%M:%S')$${NC} - $1" | tee -a "$LOG_FILE"
}

# Define target resource groups from Terraform
TARGET_RGS=(${length(var.target_resource_groups) > 0 ? join(" ", formatlist("\"%s\"", var.target_resource_groups)) : "\"web-resource-group\" \"WEB-RESOURCE-GROUP\""})
VAULT_NAME="${var.target_vault_name}"
VAULT_RG="${var.target_vault_resource_group}"

# Get subscription details
SUBSCRIPTION_ID=$(az account show --query id -o tsv)
log "Working with subscription: $SUBSCRIPTION_ID"

# Function to check and cancel operations for a resource group
check_cancel_operations() {
  local RG=$1
  
  log "Checking for pending operations in resource group: $RG"
  
  # Check if the resource group exists
  if [ "$(az group exists --name "$RG")" != "true" ]; then
    log "Resource group $RG does not exist - skipping"
    return
  fi
  
  # Get vault operations - use specific vault if defined or find all vaults
  VAULT_NAMES=()
  if [ "$VAULT_NAME" != "" ]; then
    VAULT_NAMES=("$VAULT_NAME")
  else
    mapfile -t VAULT_NAMES < <(az resource list --resource-group "$RG" --resource-type Microsoft.RecoveryServices/vaults --query "[].name" -o tsv 2>/dev/null || echo "")
  fi
  
  for VAULT in "$${VAULT_NAMES[@]}"; do
    if [ -n "$VAULT" ]; then
      log "Checking for backup jobs in progress for vault: $VAULT..."
      
      # Try to get vault operations
      BACKUP_JOBS=$(az backup job list --resource-group "$RG" --vault-name "$VAULT" --query "[?status=='InProgress'].id" -o tsv 2>/dev/null) || true
      
      if [ -n "$BACKUP_JOBS" ]; then
        log "Found backup jobs in progress, attempting to cancel..."
        for JOB_ID in $BACKUP_JOBS; do
          log "Canceling backup job: $JOB_ID"
          az backup job stop --resource-group "$RG" --vault-name "$VAULT" --name "$JOB_ID" 2>/dev/null || log "Failed to cancel job"
          sleep 5
        done
      else
        log "No backup jobs found in progress for vault: $VAULT"
      fi
    fi
  done
  
  # Try to cancel any pending deletion operations
  log "Checking resource provider operations..."
  
  # Specific providers that might have pending operations
  PROVIDERS=(
    "Microsoft.RecoveryServices"
    "Microsoft.Compute"
    "Microsoft.Storage"
    "Microsoft.Network"
  )
  
  for PROVIDER in "$${PROVIDERS[@]}"; do
    log "Checking operations for provider: $PROVIDER"
    
    # Get operations in progress
    OPERATIONS=$(az rest --method GET --url "https://management.azure.com/subscriptions/$SUBSCRIPTION_ID/providers/$PROVIDER/operations?api-version=2021-04-01" --query "value[?contains(name,'$RG') && status=='InProgress'].name" -o tsv 2>/dev/null) || true
    
    if [ -n "$OPERATIONS" ]; then
      log "$${YELLOW}Found operations in progress for provider $PROVIDER$${NC}"
      for OP in $OPERATIONS; do
        log "Operation: $OP"
      done
    else
      log "No operations found for provider: $PROVIDER"
    fi
  done
  
  # Last resort - try to forcefully delete the resource group again
  log "$${RED}Attempting emergency resource group deletion...$${NC}"
  
  # Method 1: Standard delete with force
  log "Emergency Method 1: Standard resource group delete (may take several minutes)..."
  az group delete --name "$RG" --yes --verbose || log "Emergency delete method 1 failed"
  
  sleep 30
  
  # Method 2: REST API with additional force parameters
  if [ "$(az group exists --name "$RG")" == "true" ]; then
    log "Emergency Method 2: REST API with force=true and forceDeletion=true..."
    # Note: This uses undocumented force parameters that might help in some cases
    az rest --method DELETE --url "https://management.azure.com/subscriptions/$SUBSCRIPTION_ID/resourcegroups/$RG?force=true&forceDeletion=true&api-version=2021-04-01" || log "Emergency delete method 2 failed"
  fi
}

# Process each resource group
for RG in "$${TARGET_RGS[@]}"; do
  log "Processing operations for $RG"
  check_cancel_operations "$RG"
done

log "Operations cancellation completed. For stubborn resources, you may need to contact Azure Support."
log "Check log file for details: $LOG_FILE"
SCRIPT

  # Script for vault cleanup
  vault_cleanup_script = <<-SCRIPT
#!/bin/bash
# Direct Recovery Services Vault Removal Script
# Generated by Terraform Azure Cleanup Module

# Create logs directory if it doesn't exist
mkdir -p ./logs

# Set timeout (300 seconds = 5 minutes) for long-running operations
TIMEOUT=300

# Color codes for better readability
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Log file with timestamp
LOG_FILE="./logs/vault_cleanup_$(date +%Y%m%d_%H%M%S).log"

# Function to log messages
log() {
  echo -e "$${BLUE}$(date '+%Y-%m-%d %H:%M:%S')$${NC} - $1" | tee -a "$LOG_FILE"
}

# Target vault info
VAULT_NAME="${var.target_vault_name}"
RESOURCE_GROUP="${var.target_vault_resource_group}"

# Get subscription ID
SUBSCRIPTION_ID=$(az account show --query id -o tsv)
log "Working with subscription: $SUBSCRIPTION_ID"

# Vault resource ID
VAULT_ID="/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.RecoveryServices/vaults/$VAULT_NAME"
log "Target vault ID: $VAULT_ID"

# Check if vault exists
log "Checking if vault exists..."
VAULT_EXISTS=$(az resource list --resource-group "$RESOURCE_GROUP" --resource-type Microsoft.RecoveryServices/vaults --query "[?name=='$VAULT_NAME'].name" -o tsv 2>/dev/null) || true

if [ -z "$VAULT_EXISTS" ]; then
  log "$${GREEN}Vault does not exist or is already deleted. Nothing to do.$${NC}"
  exit 0
else
  log "$${YELLOW}Found vault: $VAULT_NAME in resource group: $RESOURCE_GROUP$${NC}"
fi

# Step 1: Force disable soft delete
log "Step 1: Disabling soft delete protection..."
az backup vault backup-properties set --resource-group "$RESOURCE_GROUP" --name "$VAULT_NAME" --soft-delete-feature-state Disable 2>/dev/null || log "Soft delete disable failed - continuing anyway"

# Step 2: Identify and clean up all backup items across all container types
log "Step 2: Aggressively cleaning up all backup items..."

# Process AzureIaasVM backup items first - these are most common
log "Processing AzureIaasVM backup items..."
CONTAINERS=$(az backup container list --resource-group "$RESOURCE_GROUP" --vault-name "$VAULT_NAME" --backup-management-type AzureIaasVM --query "[].name" -o tsv 2>/dev/null) || true

if [ -n "$CONTAINERS" ]; then
  for CONTAINER in $CONTAINERS; do
    log "Found container: $CONTAINER"
    
    # Get all items in this container
    ITEMS=$(az backup item list --resource-group "$RESOURCE_GROUP" --vault-name "$VAULT_NAME" --backup-management-type AzureIaasVM --container-name "$CONTAINER" --query "[].name" -o tsv 2>/dev/null) || true
    
    if [ -n "$ITEMS" ]; then
      for ITEM in $ITEMS; do
        log "Processing item: $ITEM"
        
        # First try to undelete any soft-deleted items
        log "Attempting to undelete item..."
        az backup item undelete --resource-group "$RESOURCE_GROUP" --vault-name "$VAULT_NAME" --container-name "$CONTAINER" --item-name "$ITEM" --backup-management-type AzureIaasVM 2>/dev/null || log "Undelete not needed or failed"
        
        sleep 20
        
        # Now try to disable protection with multiple attempts
        log "Attempting to disable protection..."
        for i in {1..3}; do
          log "Attempt $i to disable protection..."
          
          # Use explicit --force flag and --yes to bypass any confirmations
          if az backup protection disable --resource-group "$RESOURCE_GROUP" --vault-name "$VAULT_NAME" --container-name "$CONTAINER" --item-name "$ITEM" --backup-management-type AzureIaasVM --delete-backup-data true --yes --force 2>/dev/null; then
            log "$${GREEN}Successfully disabled protection for item: $ITEM$${NC}"
            break
          else
            log "$${YELLOW}Failed attempt $i - waiting before retry...$${NC}"
            sleep 30
          fi
        done
      done
    else
      log "No backup items found in container: $CONTAINER"
    fi
    
    # Try to delete the container directly through REST API
    log "Attempting to remove container directly..."
    CONTAINER_ESCAPED=$(echo "$CONTAINER" | sed 's/;/%3B/g')
    az rest --method DELETE --url "https://management.azure.com$VAULT_ID/backupFabrics/Azure/protectionContainers/$CONTAINER_ESCAPED?api-version=2021-12-01" 2>/dev/null || log "Container delete failed - continuing"
  done
else
  log "No Azure IaaS VM containers found"
fi

# Step 3: Try to delete all backup policies
log "Step 3: Removing backup policies..."
POLICIES=$(az backup policy list --resource-group "$RESOURCE_GROUP" --vault-name "$VAULT_NAME" --query "[].name" -o tsv 2>/dev/null) || true

if [ -n "$POLICIES" ]; then
  for POLICY in $POLICIES; do
    log "Deleting policy: $POLICY"
    az backup policy delete --resource-group "$RESOURCE_GROUP" --vault-name "$VAULT_NAME" --name "$POLICY" 2>/dev/null || log "Policy delete failed - continuing"
  done
fi

# Step 4: Try multiple approaches to delete the vault
log "Step 4: Attempting multiple vault deletion methods..."

# Approach 1: Standard delete
log "Method 1: Standard Azure CLI delete..."
az resource delete --resource-group "$RESOURCE_GROUP" --resource-type Microsoft.RecoveryServices/vaults --name "$VAULT_NAME" 2>/dev/null || log "Standard delete failed"

sleep 30

# Check if vault still exists
VAULT_EXISTS=$(az resource list --resource-group "$RESOURCE_GROUP" --resource-type Microsoft.RecoveryServices/vaults --query "[?name=='$VAULT_NAME'].name" -o tsv 2>/dev/null) || true

if [ -n "$VAULT_EXISTS" ]; then
  # Approach 2: Use resource ID to delete
  log "Method 2: Using resource ID..."
  az resource delete --ids "$VAULT_ID" 2>/dev/null || log "Resource ID delete failed"
  
  sleep 30
  
  # Check again
  VAULT_EXISTS=$(az resource list --resource-group "$RESOURCE_GROUP" --resource-type Microsoft.RecoveryServices/vaults --query "[?name=='$VAULT_NAME'].name" -o tsv 2>/dev/null) || true
  
  if [ -n "$VAULT_EXISTS" ]; then
    # Approach 3: REST API with force parameter
    log "Method 3: REST API with force parameter..."
    az rest --method DELETE --url "https://management.azure.com$VAULT_ID?api-version=2021-12-01&force=true" 2>/dev/null || log "REST API delete failed"
    
    sleep 30
    
    # Final check
    VAULT_EXISTS=$(az resource list --resource-group "$RESOURCE_GROUP" --resource-type Microsoft.RecoveryServices/vaults --query "[?name=='$VAULT_NAME'].name" -o tsv 2>/dev/null) || true
    
    if [ -n "$VAULT_EXISTS" ]; then
      log "$${RED}All deletion methods failed. The vault still exists.$${NC}"
      log "You may need to delete this manually through the Azure Portal."
      log "Portal URL: https://portal.azure.com/#blade/HubsExtension/BrowseResource/resourceType/Microsoft.RecoveryServices%2Fvaults"
      exit 1
    else
      log "$${GREEN}Vault successfully deleted!$${NC}"
    fi
  else
    log "$${GREEN}Vault successfully deleted!$${NC}"
  fi
else
  log "$${GREEN}Vault successfully deleted!$${NC}"
fi

log "Vault cleanup operations complete. Check log file for details: $LOG_FILE"
SCRIPT

  # Script for aggressive resource group cleanup
  aggressive_cleanup_script = <<-SCRIPT
#!/bin/bash
# Direct Resource Group Deletion Script
# Generated by Terraform Azure Cleanup Module

# Create logs directory if it doesn't exist
mkdir -p ./logs

# Color codes for better readability
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Log file with timestamp
LOG_FILE="./logs/aggressive_cleanup_$(date +%Y%m%d_%H%M%S).log"

# Function to log messages
log() {
  echo -e "$${BLUE}$(date '+%Y-%m-%d %H:%M:%S')$${NC} - $1" | tee -a "$LOG_FILE"
}

# Get subscription details
SUBSCRIPTION_ID=$(az account show --query id -o tsv)
log "Working with subscription: $SUBSCRIPTION_ID"

# Target resource groups from Terraform
REMAINING_GROUPS=(${join(" ", formatlist("\"%s\"", var.target_resource_groups))})

# Function to force delete a resource group by bypassing its resources
force_delete_resource_group() {
  local RG="$1"
  
  log "$${RED}ATTEMPTING DIRECT DELETION OF: $RG$${NC}"
  
  # Check if it exists first
  if [ "$(az group exists --name "$RG")" != "true" ]; then
    log "Resource group $RG does not exist - skipping"
    return 0
  fi
  
  log "1. Removing all resource locks..."
  LOCKS=$(az lock list --resource-group "$RG" --query "[].id" -o tsv 2>/dev/null) || true
  if [ -n "$LOCKS" ]; then
    for LOCK_ID in $LOCKS; do
      log "Removing lock: $LOCK_ID"
      az lock delete --ids "$LOCK_ID" 2>/dev/null || true
    done
  fi
  
  # List all resources - we'll delete in reverse order to handle dependencies
  log "2. Listing all resources for targeted deletion..."
  RESOURCES=$(az resource list --resource-group "$RG" --query "[].id" -o tsv 2>/dev/null) || true
  
  if [ -n "$RESOURCES" ]; then
    # Delete all resources one by one, in reverse order
    log "3. Deleting all resources one by one (in reverse order)..."
    # Use tac for Linux or tail -r for macOS
    if command -v tac &>/dev/null; then
      echo "$RESOURCES" | tac | process_resources "$RG"
    else
      # For macOS
      echo "$RESOURCES" | tail -r | process_resources "$RG"
    fi
  else
    log "No resources found in group: $RG"
  fi
  
  # Now try multiple deletion methods for the resource group itself
  log "4. Attempting resource group deletion with various methods..."
  
  # Standard delete with yes flag
  log "Method 1: Standard Azure CLI delete..."
  az group delete --name "$RG" --yes 2>/dev/null || true
  
  sleep 30
  
  # Check if resource group still exists
  if [ "$(az group exists --name "$RG")" == "true" ]; then
    # Try REST API with force flag
    log "Method 2: REST API direct call..."
    az rest --method DELETE \
      --url "https://management.azure.com/subscriptions/$SUBSCRIPTION_ID/resourcegroups/$RG?api-version=2021-04-01&forceDeletion=true" \
      2>/dev/null || true
      
    sleep 30
    
    # Final check
    if [ "$(az group exists --name "$RG")" == "true" ]; then
      # Async delete as last resort
      log "Method 3: Async background delete..."
      az group delete --name "$RG" --yes --no-wait 2>/dev/null || true
      
      # Wait and check
      log "Waiting for async deletion..."
      for i in {1..6}; do
        sleep 10
        if [ "$(az group exists --name "$RG")" != "true" ]; then
          log "$${GREEN}Resource group $RG successfully deleted$${NC}"
          return 0
        fi
      done
      
      log "$${RED}Failed to delete resource group: $RG after all methods$${NC}"
      return 1
    else
      log "$${GREEN}Resource group $RG successfully deleted$${NC}"
      return 0
    fi
  else
    log "$${GREEN}Resource group $RG successfully deleted$${NC}"
    return 0
  fi
}

# Function to process resources (used by the reverse loop)
process_resources() {
  local RG="$1"
  
  while read -r RESOURCE_ID; do
    RESOURCE_TYPE=$(echo "$RESOURCE_ID" | cut -d'/' -f7,8)
    RESOURCE_NAME=$(echo "$RESOURCE_ID" | rev | cut -d'/' -f1 | rev)
    
    # Skip Recovery Services vaults - they require special handling
    if [[ "$RESOURCE_TYPE" == "Microsoft.RecoveryServices/vaults" ]]; then
      log "Skipping Recovery Services vault: $RESOURCE_NAME - these require special handling"
      continue
    fi
    
    log "Deleting resource: $RESOURCE_NAME ($RESOURCE_TYPE)"
    
    # Special pre-processing for certain resources
    if [[ "$RESOURCE_TYPE" == "Microsoft.Compute/virtualMachines" ]]; then
      # Force deallocate VM first
      VM_NAME=$(echo "$RESOURCE_ID" | rev | cut -d'/' -f1 | rev)
      log "Pre-processing: Deallocating VM: $VM_NAME"
      az vm deallocate --resource-group "$RG" --name "$VM_NAME" --no-wait 2>/dev/null || true
      sleep 5
    fi
    
    # Now try to delete using the resource ID
    az resource delete --ids "$RESOURCE_ID" --verbose 2>/dev/null || true
    sleep 2
  done
}

# Main execution
log "$${RED}STARTING DIRECT RESOURCE GROUP DELETION$${NC}"
log "This script will attempt to delete resource groups directly, bypassing dependencies"

# Process each resource group
for RG in "$${REMAINING_GROUPS[@]}"; do
  log "==============================================="
  log "Processing resource group: $RG"
  force_delete_resource_group "$RG"
  log "-----------------------------------------------"
done

# Final verification
log "Checking if targeted resource groups still exist..."
STILL_REMAINING=""

for RG in "$${REMAINING_GROUPS[@]}"; do
  if [ "$(az group exists --name "$RG")" == "true" ]; then
    STILL_REMAINING="$STILL_REMAINING $RG"
  fi
done

if [ -n "$STILL_REMAINING" ]; then
  log "$${RED}Some resource groups still exist:$${NC}$STILL_REMAINING"
  log "Manual deletion through Azure Portal may be required"
else
  log "$${GREEN}All targeted resource groups successfully removed!$${NC}"
fi

log "Direct resource group deletion completed. Check log file for details: $LOG_FILE"
SCRIPT
} 